// Code generated by go-swagger; DO NOT EDIT.

package job_rest_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "pfistera/swagger_client/models"
)

// FindAllUsingGETReader is a Reader for the FindAllUsingGET structure.
type FindAllUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindAllUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindAllUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewFindAllUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFindAllUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFindAllUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFindAllUsingGETOK creates a FindAllUsingGETOK with default headers values
func NewFindAllUsingGETOK() *FindAllUsingGETOK {
	return &FindAllUsingGETOK{}
}

/*FindAllUsingGETOK handles this case with default header values.

OK
*/
type FindAllUsingGETOK struct {
	Payload []*models.Job
}

func (o *FindAllUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /api/job][%d] findAllUsingGETOK  %+v", 200, o.Payload)
}

func (o *FindAllUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindAllUsingGETUnauthorized creates a FindAllUsingGETUnauthorized with default headers values
func NewFindAllUsingGETUnauthorized() *FindAllUsingGETUnauthorized {
	return &FindAllUsingGETUnauthorized{}
}

/*FindAllUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type FindAllUsingGETUnauthorized struct {
}

func (o *FindAllUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/job][%d] findAllUsingGETUnauthorized ", 401)
}

func (o *FindAllUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindAllUsingGETForbidden creates a FindAllUsingGETForbidden with default headers values
func NewFindAllUsingGETForbidden() *FindAllUsingGETForbidden {
	return &FindAllUsingGETForbidden{}
}

/*FindAllUsingGETForbidden handles this case with default header values.

Forbidden
*/
type FindAllUsingGETForbidden struct {
}

func (o *FindAllUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/job][%d] findAllUsingGETForbidden ", 403)
}

func (o *FindAllUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindAllUsingGETNotFound creates a FindAllUsingGETNotFound with default headers values
func NewFindAllUsingGETNotFound() *FindAllUsingGETNotFound {
	return &FindAllUsingGETNotFound{}
}

/*FindAllUsingGETNotFound handles this case with default header values.

Not Found
*/
type FindAllUsingGETNotFound struct {
}

func (o *FindAllUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/job][%d] findAllUsingGETNotFound ", 404)
}

func (o *FindAllUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
