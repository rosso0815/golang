// Code generated by go-swagger; DO NOT EDIT.

package timesheet_rest_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "pfistera/swagger_client/models"
)

// RetrieveAllTimeSheetUsingGETReader is a Reader for the RetrieveAllTimeSheetUsingGET structure.
type RetrieveAllTimeSheetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrieveAllTimeSheetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRetrieveAllTimeSheetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewRetrieveAllTimeSheetUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRetrieveAllTimeSheetUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRetrieveAllTimeSheetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRetrieveAllTimeSheetUsingGETOK creates a RetrieveAllTimeSheetUsingGETOK with default headers values
func NewRetrieveAllTimeSheetUsingGETOK() *RetrieveAllTimeSheetUsingGETOK {
	return &RetrieveAllTimeSheetUsingGETOK{}
}

/*RetrieveAllTimeSheetUsingGETOK handles this case with default header values.

OK
*/
type RetrieveAllTimeSheetUsingGETOK struct {
	Payload []*models.Timesheet
}

func (o *RetrieveAllTimeSheetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /api/timesheet][%d] retrieveAllTimeSheetUsingGETOK  %+v", 200, o.Payload)
}

func (o *RetrieveAllTimeSheetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveAllTimeSheetUsingGETUnauthorized creates a RetrieveAllTimeSheetUsingGETUnauthorized with default headers values
func NewRetrieveAllTimeSheetUsingGETUnauthorized() *RetrieveAllTimeSheetUsingGETUnauthorized {
	return &RetrieveAllTimeSheetUsingGETUnauthorized{}
}

/*RetrieveAllTimeSheetUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type RetrieveAllTimeSheetUsingGETUnauthorized struct {
}

func (o *RetrieveAllTimeSheetUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/timesheet][%d] retrieveAllTimeSheetUsingGETUnauthorized ", 401)
}

func (o *RetrieveAllTimeSheetUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetrieveAllTimeSheetUsingGETForbidden creates a RetrieveAllTimeSheetUsingGETForbidden with default headers values
func NewRetrieveAllTimeSheetUsingGETForbidden() *RetrieveAllTimeSheetUsingGETForbidden {
	return &RetrieveAllTimeSheetUsingGETForbidden{}
}

/*RetrieveAllTimeSheetUsingGETForbidden handles this case with default header values.

Forbidden
*/
type RetrieveAllTimeSheetUsingGETForbidden struct {
}

func (o *RetrieveAllTimeSheetUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /api/timesheet][%d] retrieveAllTimeSheetUsingGETForbidden ", 403)
}

func (o *RetrieveAllTimeSheetUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetrieveAllTimeSheetUsingGETNotFound creates a RetrieveAllTimeSheetUsingGETNotFound with default headers values
func NewRetrieveAllTimeSheetUsingGETNotFound() *RetrieveAllTimeSheetUsingGETNotFound {
	return &RetrieveAllTimeSheetUsingGETNotFound{}
}

/*RetrieveAllTimeSheetUsingGETNotFound handles this case with default header values.

Not Found
*/
type RetrieveAllTimeSheetUsingGETNotFound struct {
}

func (o *RetrieveAllTimeSheetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /api/timesheet][%d] retrieveAllTimeSheetUsingGETNotFound ", 404)
}

func (o *RetrieveAllTimeSheetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
