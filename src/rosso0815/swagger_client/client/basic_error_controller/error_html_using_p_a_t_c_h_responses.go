// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "pfistera/swagger_client/models"
)

// ErrorHTMLUsingPATCHReader is a Reader for the ErrorHTMLUsingPATCH structure.
type ErrorHTMLUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorHTMLUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewErrorHTMLUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewErrorHTMLUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewErrorHTMLUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewErrorHTMLUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewErrorHTMLUsingPATCHOK creates a ErrorHTMLUsingPATCHOK with default headers values
func NewErrorHTMLUsingPATCHOK() *ErrorHTMLUsingPATCHOK {
	return &ErrorHTMLUsingPATCHOK{}
}

/*ErrorHTMLUsingPATCHOK handles this case with default header values.

OK
*/
type ErrorHTMLUsingPATCHOK struct {
	Payload *models.ModelAndView
}

func (o *ErrorHTMLUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorHtmlUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *ErrorHTMLUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelAndView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorHTMLUsingPATCHNoContent creates a ErrorHTMLUsingPATCHNoContent with default headers values
func NewErrorHTMLUsingPATCHNoContent() *ErrorHTMLUsingPATCHNoContent {
	return &ErrorHTMLUsingPATCHNoContent{}
}

/*ErrorHTMLUsingPATCHNoContent handles this case with default header values.

No Content
*/
type ErrorHTMLUsingPATCHNoContent struct {
}

func (o *ErrorHTMLUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorHtmlUsingPATCHNoContent ", 204)
}

func (o *ErrorHTMLUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPATCHUnauthorized creates a ErrorHTMLUsingPATCHUnauthorized with default headers values
func NewErrorHTMLUsingPATCHUnauthorized() *ErrorHTMLUsingPATCHUnauthorized {
	return &ErrorHTMLUsingPATCHUnauthorized{}
}

/*ErrorHTMLUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type ErrorHTMLUsingPATCHUnauthorized struct {
}

func (o *ErrorHTMLUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorHtmlUsingPATCHUnauthorized ", 401)
}

func (o *ErrorHTMLUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPATCHForbidden creates a ErrorHTMLUsingPATCHForbidden with default headers values
func NewErrorHTMLUsingPATCHForbidden() *ErrorHTMLUsingPATCHForbidden {
	return &ErrorHTMLUsingPATCHForbidden{}
}

/*ErrorHTMLUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type ErrorHTMLUsingPATCHForbidden struct {
}

func (o *ErrorHTMLUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /error][%d] errorHtmlUsingPATCHForbidden ", 403)
}

func (o *ErrorHTMLUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
