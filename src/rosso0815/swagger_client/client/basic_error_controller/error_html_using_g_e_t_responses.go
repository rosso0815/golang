// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "pfistera/swagger_client/models"
)

// ErrorHTMLUsingGETReader is a Reader for the ErrorHTMLUsingGET structure.
type ErrorHTMLUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorHTMLUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewErrorHTMLUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewErrorHTMLUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewErrorHTMLUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewErrorHTMLUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewErrorHTMLUsingGETOK creates a ErrorHTMLUsingGETOK with default headers values
func NewErrorHTMLUsingGETOK() *ErrorHTMLUsingGETOK {
	return &ErrorHTMLUsingGETOK{}
}

/*ErrorHTMLUsingGETOK handles this case with default header values.

OK
*/
type ErrorHTMLUsingGETOK struct {
	Payload *models.ModelAndView
}

func (o *ErrorHTMLUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /error][%d] errorHtmlUsingGETOK  %+v", 200, o.Payload)
}

func (o *ErrorHTMLUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelAndView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorHTMLUsingGETUnauthorized creates a ErrorHTMLUsingGETUnauthorized with default headers values
func NewErrorHTMLUsingGETUnauthorized() *ErrorHTMLUsingGETUnauthorized {
	return &ErrorHTMLUsingGETUnauthorized{}
}

/*ErrorHTMLUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type ErrorHTMLUsingGETUnauthorized struct {
}

func (o *ErrorHTMLUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /error][%d] errorHtmlUsingGETUnauthorized ", 401)
}

func (o *ErrorHTMLUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingGETForbidden creates a ErrorHTMLUsingGETForbidden with default headers values
func NewErrorHTMLUsingGETForbidden() *ErrorHTMLUsingGETForbidden {
	return &ErrorHTMLUsingGETForbidden{}
}

/*ErrorHTMLUsingGETForbidden handles this case with default header values.

Forbidden
*/
type ErrorHTMLUsingGETForbidden struct {
}

func (o *ErrorHTMLUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /error][%d] errorHtmlUsingGETForbidden ", 403)
}

func (o *ErrorHTMLUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingGETNotFound creates a ErrorHTMLUsingGETNotFound with default headers values
func NewErrorHTMLUsingGETNotFound() *ErrorHTMLUsingGETNotFound {
	return &ErrorHTMLUsingGETNotFound{}
}

/*ErrorHTMLUsingGETNotFound handles this case with default header values.

Not Found
*/
type ErrorHTMLUsingGETNotFound struct {
}

func (o *ErrorHTMLUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /error][%d] errorHtmlUsingGETNotFound ", 404)
}

func (o *ErrorHTMLUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
