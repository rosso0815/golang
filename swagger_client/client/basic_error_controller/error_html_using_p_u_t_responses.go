// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "pfistera/swagger_client/models"
)

// ErrorHTMLUsingPUTReader is a Reader for the ErrorHTMLUsingPUT structure.
type ErrorHTMLUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorHTMLUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewErrorHTMLUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewErrorHTMLUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewErrorHTMLUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewErrorHTMLUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewErrorHTMLUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewErrorHTMLUsingPUTOK creates a ErrorHTMLUsingPUTOK with default headers values
func NewErrorHTMLUsingPUTOK() *ErrorHTMLUsingPUTOK {
	return &ErrorHTMLUsingPUTOK{}
}

/*ErrorHTMLUsingPUTOK handles this case with default header values.

OK
*/
type ErrorHTMLUsingPUTOK struct {
	Payload *models.ModelAndView
}

func (o *ErrorHTMLUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorHtmlUsingPUTOK  %+v", 200, o.Payload)
}

func (o *ErrorHTMLUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelAndView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorHTMLUsingPUTCreated creates a ErrorHTMLUsingPUTCreated with default headers values
func NewErrorHTMLUsingPUTCreated() *ErrorHTMLUsingPUTCreated {
	return &ErrorHTMLUsingPUTCreated{}
}

/*ErrorHTMLUsingPUTCreated handles this case with default header values.

Created
*/
type ErrorHTMLUsingPUTCreated struct {
}

func (o *ErrorHTMLUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorHtmlUsingPUTCreated ", 201)
}

func (o *ErrorHTMLUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPUTUnauthorized creates a ErrorHTMLUsingPUTUnauthorized with default headers values
func NewErrorHTMLUsingPUTUnauthorized() *ErrorHTMLUsingPUTUnauthorized {
	return &ErrorHTMLUsingPUTUnauthorized{}
}

/*ErrorHTMLUsingPUTUnauthorized handles this case with default header values.

Unauthorized
*/
type ErrorHTMLUsingPUTUnauthorized struct {
}

func (o *ErrorHTMLUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorHtmlUsingPUTUnauthorized ", 401)
}

func (o *ErrorHTMLUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPUTForbidden creates a ErrorHTMLUsingPUTForbidden with default headers values
func NewErrorHTMLUsingPUTForbidden() *ErrorHTMLUsingPUTForbidden {
	return &ErrorHTMLUsingPUTForbidden{}
}

/*ErrorHTMLUsingPUTForbidden handles this case with default header values.

Forbidden
*/
type ErrorHTMLUsingPUTForbidden struct {
}

func (o *ErrorHTMLUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorHtmlUsingPUTForbidden ", 403)
}

func (o *ErrorHTMLUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPUTNotFound creates a ErrorHTMLUsingPUTNotFound with default headers values
func NewErrorHTMLUsingPUTNotFound() *ErrorHTMLUsingPUTNotFound {
	return &ErrorHTMLUsingPUTNotFound{}
}

/*ErrorHTMLUsingPUTNotFound handles this case with default header values.

Not Found
*/
type ErrorHTMLUsingPUTNotFound struct {
}

func (o *ErrorHTMLUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /error][%d] errorHtmlUsingPUTNotFound ", 404)
}

func (o *ErrorHTMLUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
