// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new basic error controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for basic error controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ErrorHTMLUsingDELETE errors Html
*/
func (a *Client) ErrorHTMLUsingDELETE(params *ErrorHTMLUsingDELETEParams) (*ErrorHTMLUsingDELETEOK, *ErrorHTMLUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorHTMLUsingDELETEOK:
		return value, nil, nil
	case *ErrorHTMLUsingDELETENoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ErrorHTMLUsingGET errors Html
*/
func (a *Client) ErrorHTMLUsingGET(params *ErrorHTMLUsingGETParams) (*ErrorHTMLUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingGET",
		Method:             "GET",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ErrorHTMLUsingGETOK), nil

}

/*
ErrorHTMLUsingHEAD errors Html
*/
func (a *Client) ErrorHTMLUsingHEAD(params *ErrorHTMLUsingHEADParams) (*ErrorHTMLUsingHEADOK, *ErrorHTMLUsingHEADNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingHEADParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingHEAD",
		Method:             "HEAD",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingHEADReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorHTMLUsingHEADOK:
		return value, nil, nil
	case *ErrorHTMLUsingHEADNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ErrorHTMLUsingOPTIONS errors Html
*/
func (a *Client) ErrorHTMLUsingOPTIONS(params *ErrorHTMLUsingOPTIONSParams) (*ErrorHTMLUsingOPTIONSOK, *ErrorHTMLUsingOPTIONSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingOPTIONSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingOPTIONS",
		Method:             "OPTIONS",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingOPTIONSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorHTMLUsingOPTIONSOK:
		return value, nil, nil
	case *ErrorHTMLUsingOPTIONSNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ErrorHTMLUsingPATCH errors Html
*/
func (a *Client) ErrorHTMLUsingPATCH(params *ErrorHTMLUsingPATCHParams) (*ErrorHTMLUsingPATCHOK, *ErrorHTMLUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorHTMLUsingPATCHOK:
		return value, nil, nil
	case *ErrorHTMLUsingPATCHNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ErrorHTMLUsingPOST errors Html
*/
func (a *Client) ErrorHTMLUsingPOST(params *ErrorHTMLUsingPOSTParams) (*ErrorHTMLUsingPOSTOK, *ErrorHTMLUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingPOST",
		Method:             "POST",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorHTMLUsingPOSTOK:
		return value, nil, nil
	case *ErrorHTMLUsingPOSTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ErrorHTMLUsingPUT errors Html
*/
func (a *Client) ErrorHTMLUsingPUT(params *ErrorHTMLUsingPUTParams) (*ErrorHTMLUsingPUTOK, *ErrorHTMLUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewErrorHTMLUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "errorHtmlUsingPUT",
		Method:             "PUT",
		PathPattern:        "/error",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ErrorHTMLUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ErrorHTMLUsingPUTOK:
		return value, nil, nil
	case *ErrorHTMLUsingPUTCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
